// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
import "./ERC721A.sol";
import "./Ownable.sol";
/*
░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒░░░░░░░
░░░░░░▒▒░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░▒▒░░░░░
░░░░▒▒░░░▒▒░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░░
░░▒▒░░░▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░▒▒░
░▒▒░░░░▒▓▒░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▒▒░
░░░▒▒░░░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░▒▒▓██▓▓▒░░░
░░░░░▒▒░░░▓▓░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░▒▒███▓▓░░░░░
████████████████████████████████████████████████████████████████████████████████
███▓▓▓▓████████████████████▓▓█▓▓▓▓████▓▓▓████▓▓▓█████████████████████████▓▓▓▓▓▓▓
███░░░▒████████████████████▒▒▒▒▒░░▓██▓░░░███▒░░░█████████████████████▓▓▓▓░░░░░░░
▒▒▒███▓▒▒▒█████████████▓▒▒▒▒░░▒▒▒▒▒▒▒▓███▒▒▒▒██▓▒▒▒██████████████▒▒▓▓▓▓▒▓░░░░░░░
░░▒███▓░░░█████████████▒░░░░░░░▒▒▒▒░░▓███░░░▓███░░░█████████████▓░░▒▒▒▒▒▓░░░░░░░
░░░░░░██████████████▒▒▓▓▒▒▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒████████████████████▓░░░░░▒▒▒▒▒▒▒░░░░░░
░░░░░░▓█████████████▒▓▓▓▓▒▓▓▒▒▒▒▒▒▒▒▒░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░░▒▒▒▒▒▒▒▒▓▒░░░░░
░░░░░▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▓▓▓█▓▒▒░░░▒▒▒▒▒▒░░░▒▒░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓░░░░░
░░░░▒▒▓▓▒▓▓▒▒▒▒▒▒▒▒▒█▓▓▒▒▒▒▒▒▓▓▒▓▒░░░░░▒▒░░▒▒░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓░░░░
░░░░▒▓▓▓▓▓▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▓▓▓▓▒░░░░░░▒▒░░░▒▒░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▓▒░░░
░░░▒▓▓▓▓▓▒▓▓▓▓▓▓▒▒▒▓▒▒▒▓▓▓▓▒▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▒░░▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒░░▒▓░░░
░░▒▓██▓▓▓▒▓█████▓▒▒▒▒▒▒████▓▒▒▓███▓▒▒▒████████████▓▓▒▒▒▒████████████▓▓▒▒▒░░░▒▓░░
░░▓███▓▓▒▒▓██████▓▒▒▒▒▒▓███▒▒▒▓███▓░░▒████▓▓▓▓▓▓▓███▓▒▒▒▓███▓▓▓▓▓▓████▓▒▒▒░░░▓░░
░▒▓███▓▒▒▒▓███████▓▒▒▒▒▓███▒▒░▓███▒░░▒████▒░▒▒░░▒▓███▒▒▒▓███▓▒▒▒▒▒▒▓███▓▒▒░░░▒▓░
░▒███▓▓▒▒▒▓████▓███▓▒▒▒▓███▒░░▓███▒░░▒████▒▒▒▒░░░▓███▓░▒▓███▓▒▒▒▒▒▒▒▓██▓▒▒▒░░░▓░
░▓███▓▓▒▒▒▓████▒▓███▓▒▒▓███▒░░▓███▒░░▒████▒▒▒▒░░▒▓███▒░▒▓███▓░░░░▒▒▒▓██▓▒▒▒░░░▒▒
▒▓███▓▒▒▒▒▓████▓░▒▓██▒▒▓███▒░░▓███▓▒▒▒█████████████▓▓▒▒▒▓███▒░░░░░░▒▓██▓▒▒▒░░░▒▒
▒▓██▓▓▒▒▒░▓████▓░░▒▓██▒▓███▒▒▒▓███▓▒░▒████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▓███▓░░░░░░▒▓██▓░▒▒░░░░▓
▒▓██▓▓▒▒▒░▓████▓░░░▒▓██████▓▒▒▓███▓▒░▒████▒░░░░░░▒▒▒▒▒▒▒▓███▓▒▒▒▒▒▒▓███▓░▒▒░░░▒▓
▒▓███▓▒▒░░▓████▒░░░░▒▓█████▓▓▓▓████▓▒▒████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▓█████████████▓▒░▒▒▒░░▒▒
░▒███▓▓░░░▓████▒░░░░░▒▓████▒░▒▓████▓▓▒████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▓██████████▓▓▒░░░▒▒▒▒▒▓░
░▒▓███▓▒░░▒▒▒▒▒▒░░░░░░░▒▒▒▒░░░▒▒▓▓█▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▒▒▓░
░░▒▓██▓▓▒░░▒▓▒░░░░░░▓▒▒░░░░░░▒▓▓░░▒▓██▓█▓▓▓▓▓▓▓▒▓▓▓▒▒▒▒▓▒▓▒▓▒░░░░░▒▒▓▒░▒▒▒▒▒▒▓░░
░░░▓████▓▒░▒▒▒░░░░░░▒▒▒░░░░░░▒▒▒▒░░░▒▒▒▓▓█▓▓▓▓▓▓▓▓▓▒▒▒▓▒░▒▒▒▒░░░░░░▒▒░▒▒▒▒▒▒▓░░░
░░░░▓▓███▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒░░░░░░░░░░░░░▒▒▒▒▒▒▒▓░░░░
░░░░░▒▓████▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▒▒▒▒░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▓▒░░░░░
░░░░░░░▒▓█████▓▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▓▓▓░░░░░░░
░░░░░░░░░▒▓▓▓████▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒░░░░░░░░░
░░░░░░░░░░░░▒▒▓▓▓█████▓▓▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░▒▒▒▓▒▒░░░░░░░░░░░░
░░░░░░░░░░░░░░░░▒▒▓▓▓█████▓▓▓▒▒▒░░░░░░░░░░░░░░░░▒▒▒▒▒░░░░░░▒▒▒▒▒░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░▒▒▒▓▓▓████▓▓▓▒▒▒░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓████▓▓▒▒▒░░▒▒▒▓▓▓▓▓▓▒▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓████▓▓▒▒▓▓███▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓████████▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓██▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
*/
contract NIPDAcademy is Ownable, ERC721A {

    // Open Edition.
    uint256 public PRICE_PER_TOKEN = 0;
    uint256 public MAX_TOKEN_PER_TRANSACTION = 1;
    
    bool public mintPaused; 
    string private _baseTokenURI = "https://nipd.xyz/oe/data/";

    constructor() ERC721A("NIPD Academy", "NIPDOE") {
        mintPaused = false;
    }

    function mint(address to, uint256 quantity) external payable {
        require(!mintPaused, "Mint is paused");
        require(msg.value >= quantity * PRICE_PER_TOKEN, "Insufficient Funds");
        if (MAX_TOKEN_PER_TRANSACTION > 0) {
            require(quantity <= MAX_TOKEN_PER_TRANSACTION, "You cannot mint that many tokens");
        }
        _mint(to, quantity);
    }

    function setCost(uint256 _cost) public onlyOwner {
        PRICE_PER_TOKEN = _cost;
    }
    function setMaxMint(uint256 _num) public onlyOwner {
        MAX_TOKEN_PER_TRANSACTION = _num;
    }

    function withdraw() external onlyOwner {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer Failed");
    }

    function setBaseURI(string calldata baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    function pauseMint(bool _paused) external onlyOwner {
        mintPaused = _paused;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "./ERC721A.sol";
import "./Ownable.sol";

/*
░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░▒▒░░░░░
░░░▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒░░░░▒▒░░░
░▒▒▒░░▒▒▓▓▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░
░░▒▒▒░░▒▓▓▒░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓████▓▒░░
░░░░▒▒▒░░▒█▒░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓███▓▒░░░░
░░░░░░▒▒░░▒█▒░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓██▓▓▒░░░░░
░░░░░░░▒▒░░▒▓░░░░░░░░░▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓░░░░░░░
░░░░░░░▒▒░░▒█▒▒░░░░▒▓▓▓▓▓▒░▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒░░░░░░░
░░░░░░░▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒░░░░░░░
░░░░░░░▒▒▒▒▒█▒▒▒▒▒▒▒░░░░░░░▒▒▒▒▒▒▒▒░▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▓▓▓▓░░░░░░░
░░░░░░░▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▓▓▓░░░░░░░
░░░░░░▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▓▓░░░░░░
░░░░░░▒▓▒▒▒▓▒▒▒▒▒▒▒▒▒▓██▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▓▒░░░░░
░░░░░▒▓▓▓▒▓▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▓▒░░░░
░░░░▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▓██▓▒▒▒▒▒▓▓▓▓▓▒░░░▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▓░░░░
░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▓▓▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▓▒░░░
░░░▒███▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓█▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓░░░
░░▒▓███▓▓▒▒██████▓▓▓▓▓▒▓███▓▒▒▓███▓▒▒▒█████████████▓▓▒▒▒██████████████▓▓▒▒▒▒▒▓░░
░░▓███▓▓▒▒▒███████▓▒▒▒▒▓███▓▒▒▓███▓▒▒▒████▓▒▓▓▒▒▓████▒▒▒████▓▓▓▓▓▓▓████▓▓▒░▒▒▓▒░
░▒▓███▓▓▒▒▒████████▒▒▒▒▓███▒▒▒▓███▓▒▒▒████▒▒▓▒▒░▒▓███▓▒▒████▓▒▒▒▒▒▒▓███▓▒▒▒░░▒▓░
░▒███▓▓▒▒▒▒████▓▓███▒▒▒▓███▒▒▒▓███▓▒▒▒████▒▒▓▒░░▒▓███▒▒▒████▒▒▒▒▒▒▒▒███▓▒▓▒░░░▓░
░▓███▓▓▒▒▒▒████▓▒▓███▒▒▓███▒▒▒▓███▓▒▒▒████▓▓▓▓▓▓████▓▒▒▒████▒▒▒▒▒▒▒▒███▓▒▓▒▒▒░▓▒
░▓███▓▓▒▒▒▒████▓▒▒▓███▒▓███▒▒▒▓███▓▒▒▒█████████▓▓▓▓▓▒▒▒▒████▒▒▒▒▒▒▒▒███▓▒▒▒▒▒▒▒▒
▒▓███▓▓▒▒▒▒████▓▒▒▒▓██▓▓███▓▒▒▓███▓▒▒▒████▒▒▒▒▒░░▒▒▒▒▒▒▒████▓▒▒▒▒▒▒▓███▓▒▒▒▒▒▒▒▒
░▓███▓▓▒▒▒▒████▓▒▒▒▒▓██████▓▓▓▓████▒▒▒████▓▒▒▒▒▒▒▒▒▒▒▒▒▒████▓▓▓▓▓▓█████▒▒▒▒▒▒▒▓▒
░▒███▓▓▒▒▒▒████▓▒▒▒▒▒▒█████▒▓▓▓█████▓▓████▓▓▒▒▒▒▒▒▒▒▒▒▒▒█████████████▓▒▒▒▒▒▒▒▒▓░
░▒▓███▓▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓▓▒▒▒▓▓███▓▓▓▓▓▓█▓▓▓▓▓▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▓░
░░▓███▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓███▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓░░
░░░▓████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓████▓▓▓▓▓▓▓▒▒▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░░
░░░▒▓████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒▒▓▒░░░
░░░░░▓▓████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▒░░░░
░░░░░░▒▓█████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒▓▓▓▓▒░░░░░░
░░░░░░░░▒▓▓█████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒░░░░░░░░
░░░░░░░░░░░▒▓▓██████▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▒░░░░░░░░░░░
░░░░░░░░░░░░░░░▒▓▓▓██████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░▒▒▓▓▓█████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓█████▓▓▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▒▒▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓████▓▓▓▒▒▓▓▓███▓▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓████▓▓█████▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓█████▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
*/

contract NIPDContract is Ownable, ERC721A {

    uint256 public PRICE_PER_TOKEN = 1 ether;
    uint256 public constant MAX_SUPPLY = 110; // just like the Nifty Island
    
    bool public mintPaused; 
    string private _baseTokenURI = "https://nipd.xyz/badges/data/";

    mapping(uint256 => address) public tokenOwners;

    constructor() ERC721A("NIPD Badges", "NIPD") {
        mintPaused = false;
    }

    function mint(address to, uint256 quantity) external payable {
        require(!mintPaused, "Mint is paused");
        require(msg.value >= quantity * PRICE_PER_TOKEN, "Insufficient Funds");
        _mint(to, quantity);
    }

    function setCost(uint256 _cost) public onlyOwner {
            PRICE_PER_TOKEN = _cost;
    }

    function withdraw() external onlyOwner {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer Failed");
    }

    function setBaseURI(string calldata baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    function pauseMint(bool _paused) external onlyOwner {
        mintPaused = _paused;
    }
}